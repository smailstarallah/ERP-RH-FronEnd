// src/modules/Alertes/services/TestCompatibilityService.ts
import { alertesApiService } from './alertesApi';
import { alerteWebSocketService } from './AlerteWebSocketService';
import type { CreateAlerteRequest } from '../types';

export class TestCompatibilityService {
    
    /**
     * Test de compatibilit√© avec le backend Spring
     */
    async testBackendCompatibility(employeId: string): Promise<void> {
        console.log('üß™ === D√âBUT TEST COMPATIBILIT√â BACKEND ===');
        
        try {
            // Test 1: R√©cup√©ration des alertes
            console.log('üîç Test 1: R√©cup√©ration des alertes...');
            const alertes = await alertesApiService.getAlertes(employeId);
            console.log(`‚úÖ Test 1 OK - ${alertes.alertes.length} alertes r√©cup√©r√©es`);
            
            // Test 2: Comptage des alertes non lues
            console.log('üî¢ Test 2: Comptage des alertes non lues...');
            const count = await alertesApiService.getCompteNonLues(employeId);
            console.log(`‚úÖ Test 2 OK - ${count} alertes non lues`);
            
            // Test 3: R√©cup√©ration des alertes r√©centes
            console.log('‚è∞ Test 3: R√©cup√©ration des alertes r√©centes...');
            const recentes = await alertesApiService.getAlertesRecentes(employeId);
            console.log(`‚úÖ Test 3 OK - ${recentes.length} alertes r√©centes`);
            
            // Test 4: R√©cup√©ration par statut
            console.log('üìä Test 4: R√©cup√©ration par statut...');
            const nonLues = await alertesApiService.getAlertesParStatut(employeId, 'UNREAD');
            const lues = await alertesApiService.getAlertesParStatut(employeId, 'READ');
            console.log(`‚úÖ Test 4 OK - ${nonLues.length} non lues, ${lues.length} lues`);
            
            // Test 5: Connexion WebSocket
            console.log('üîå Test 5: Connexion WebSocket...');
            await alerteWebSocketService.connect(employeId, 'EMPLOYEE');
            
            if (alerteWebSocketService.isConnected()) {
                console.log('‚úÖ Test 5 OK - WebSocket connect√©');
                
                // Test 6: Abonnement aux alertes utilisateur
                console.log('üë§ Test 6: Abonnement aux alertes utilisateur...');
                alerteWebSocketService.subscribeToUserAlerts(employeId, (alerte) => {
                    console.log('üì® Alerte re√ßue via WebSocket:', alerte);
                });
                console.log('‚úÖ Test 6 OK - Abonnement configur√©');
                
            } else {
                console.log('‚ùå Test 5 √âCHEC - WebSocket non connect√©');
            }
            
            console.log('üéâ === TESTS DE COMPATIBILIT√â TERMIN√âS ===');
            
        } catch (error) {
            console.error('‚ùå Erreur lors des tests de compatibilit√©:', error);
            throw error;
        }
    }
    
    /**
     * Test de cr√©ation d'alerte
     */
    async testCreateAlerte(employeId: string): Promise<void> {
        console.log('üß™ === TEST CR√âATION ALERTE ===');
        
        try {
            const testAlerte: CreateAlerteRequest = {
                titre: 'Test de compatibilit√©',
                message: 'Ceci est un test de cr√©ation d\'alerte via l\'API',
                type: 'INFO',
                employeId: employeId,
                userId: employeId
            };
            
            console.log('üöÄ Cr√©ation de l\'alerte de test...');
            const nouvelleAlerte = await alertesApiService.creerAlerte(testAlerte);
            console.log('‚úÖ Alerte cr√©√©e avec succ√®s:', nouvelleAlerte);
            
            // Test de marquage comme lue
            console.log('üìñ Test de marquage comme lue...');
            await alertesApiService.marquerCommeLue(nouvelleAlerte.id);
            console.log('‚úÖ Alerte marqu√©e comme lue');
            
            // Optionnel: Test de suppression
            console.log('üóëÔ∏è Test de suppression...');
            await alertesApiService.supprimerAlerte(nouvelleAlerte.id);
            console.log('‚úÖ Alerte supprim√©e');
            
            console.log('üéâ === TEST CR√âATION TERMIN√â ===');
            
        } catch (error) {
            console.error('‚ùå Erreur lors du test de cr√©ation:', error);
            throw error;
        }
    }
    
    /**
     * Test de temps r√©el via WebSocket
     */
    async testRealTimeAlerts(employeId: string): Promise<void> {
        console.log('üß™ === TEST TEMPS R√âEL ===');
        
        try {
            // Se connecter si pas d√©j√† fait
            if (!alerteWebSocketService.isConnected()) {
                await alerteWebSocketService.connect(employeId, 'EMPLOYEE');
            }
            
            // Cr√©er une alerte via WebSocket
            const testData = {
                titre: 'Test WebSocket',
                message: 'Test de cr√©ation via WebSocket',
                type: 'SUCCESS',
                employeId: employeId,
                userId: employeId
            };
            
            console.log('üì° Envoi d\'alerte via WebSocket...');
            const success = await alerteWebSocketService.creerAlerteWebSocket(testData);
            
            if (success) {
                console.log('‚úÖ Alerte envoy√©e via WebSocket');
            } else {
                console.log('‚ùå √âchec d\'envoi via WebSocket');
            }
            
            console.log('üéâ === TEST TEMPS R√âEL TERMIN√â ===');
            
        } catch (error) {
            console.error('‚ùå Erreur lors du test temps r√©el:', error);
            throw error;
        }
    }
    
    /**
     * Lance tous les tests de compatibilit√©
     */
    async runAllTests(employeId: string): Promise<void> {
        console.log('üöÄ === D√âBUT TESTS COMPLETS ===');
        console.log(`üë§ EmployeId: ${employeId}`);
        
        try {
            await this.testBackendCompatibility(employeId);
            await this.testCreateAlerte(employeId);
            await this.testRealTimeAlerts(employeId);
            
            console.log('üéâ === TOUS LES TESTS R√âUSSIS ===');
            
        } catch (error) {
            console.error('üí• === ERREUR DANS LES TESTS ===');
            console.error(error);
        }
    }
}

export const testCompatibilityService = new TestCompatibilityService();
